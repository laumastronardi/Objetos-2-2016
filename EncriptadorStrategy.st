Object subclass: #Conexion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Encriptador'!!Conexion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Conexion methodsFor: 'communication' stamp: 'FerminMinetto 5/7/2016 16:59'!enviar: unMensaje! !Object subclass: #Encriptador	instanceVariableNames: 'algoritmo'	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Encriptador'!!Encriptador commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Encriptador methodsFor: 'initialization' stamp: 'FerminMinetto 5/7/2016 17:18'!initialize	algoritmo := StrategyRSA new.! !!Encriptador methodsFor: 'encripter' stamp: 'FerminMinetto 5/7/2016 17:13'!encriptar: unMensaje	^ (algoritmo encriptar: unMensaje)! !!Encriptador methodsFor: 'encripter' stamp: 'FerminMinetto 5/7/2016 17:23'!cambiarAlgoritmo: unAlgoritmo	algoritmo := unAlgoritmo! !!Encriptador methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 17:10'!algoritmo	^ algoritmo! !!Encriptador methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 17:10'!algoritmo: anObject	algoritmo := anObject! !Object subclass: #Mensajero	instanceVariableNames: 'conexion'	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Encriptador'!!Mensajero commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Mensajero methodsFor: 'communication' stamp: 'FerminMinetto 5/7/2016 17:15'!enviar: unMensaje	^ (conexion enviar: unMensaje)! !!Mensajero methodsFor: 'communication' stamp: 'FerminMinetto 5/7/2016 17:21'!cambiarMetodoEncriptacion: unAlgoritmo	conexion cambiarAlgoritmo: unAlgoritmo! !!Mensajero methodsFor: 'initialization' stamp: 'FerminMinetto 5/7/2016 17:13'!initialize	conexion := ConexionSegura new.! !Conexion subclass: #ConexionSegura	instanceVariableNames: 'encriptador'	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Encriptador'!!ConexionSegura commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	encriptador:		<Object>    Implementation Points!!ConexionSegura methodsFor: 'communication' stamp: 'FerminMinetto 5/7/2016 17:12'!enviar: unMensaje	^ (encriptador encriptar: unMensaje)! !!ConexionSegura methodsFor: 'initialization' stamp: 'FerminMinetto 5/7/2016 17:20'!cambiarAlgoritmo: unAlgoritmo	encriptador cambiarAlgoritmo: unAlgoritmo! !!ConexionSegura methodsFor: 'initialization' stamp: 'FerminMinetto 5/7/2016 17:16'!initialize	encriptador := Encriptador new.! !!ConexionSegura methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 17:17'!encriptador: anObject	encriptador := anObject! !!ConexionSegura methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 17:17'!encriptador	^ encriptador! !Object subclass: #EncriptacionStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Encriptador'!!EncriptacionStrategy commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	encriptar:		<Object>    Implementation Points!!EncriptacionStrategy methodsFor: 'encripter' stamp: 'FerminMinetto 5/7/2016 17:03'!encriptar: unMensaje! !EncriptacionStrategy subclass: #StrategyRC4	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Encriptador'!!StrategyRC4 commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!StrategyRC4 methodsFor: 'encripter' stamp: 'FerminMinetto 5/7/2016 17:30'!encriptar: unMensaje	^(unMensaje,' RC4')! !EncriptacionStrategy subclass: #StrategyRSA	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Encriptador'!!StrategyRSA commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!StrategyRSA methodsFor: 'encripter' stamp: 'FerminMinetto 5/7/2016 17:07'!encriptar: unMensaje	^(unMensaje,' RSA')! !EncriptacionStrategy subclass: #StrategyBlowFish	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Encriptador'!!StrategyBlowFish commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!StrategyBlowFish methodsFor: 'encripter' stamp: 'FerminMinetto 5/7/2016 17:07'!encriptar: unMensaje ^(unMensaje,' BlowFish')! !TestCase subclass: #MensajeroTestCase	instanceVariableNames: 'mensajeria'	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Encriptador'!!MensajeroTestCase methodsFor: 'initialization' stamp: 'FerminMinetto 5/7/2016 17:27'!setUp	mensajeria := Mensajero new.! !!MensajeroTestCase methodsFor: 'test-communication' stamp: 'FerminMinetto 5/7/2016 17:30'!testEnviar	self assert: ((mensajeria enviar: 'Hola!!') = 'Hola!! RSA').	mensajeria cambiarMetodoEncriptacion: (StrategyBlowFish new).	self assert: ((mensajeria enviar: 'Hola!!') = 'Hola!! BlowFish').	mensajeria cambiarMetodoEncriptacion: (StrategyRC4 new).	self assert: ((mensajeria enviar: 'Hola!!') = 'Hola!! RC4').! !