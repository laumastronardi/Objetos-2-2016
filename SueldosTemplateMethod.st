TestCase subclass: #EmpleadoTestCase	instanceVariableNames: 'empresa'	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Sueldos'!!EmpleadoTestCase methodsFor: 'initialization' stamp: 'FerminMinetto 5/7/2016 16:33'!setUp| juan mateo lucas |empresa := OrderedCollection new.empresa add: (juan := Temporario newWithBonus: True horasTrabajadas: 50).empresa add: (mateo := Planta newWithCantidadDeHijos: 0).empresa add: (lucas := Pasante newWithHoras: 30).! !!EmpleadoTestCase methodsFor: 'test - data' stamp: 'FerminMinetto 5/7/2016 16:34'!testSueldo	| sueldos |	sueldos := empresa collect: [ :a | a sueldo ].	self assert: ((sueldos at: 1) = 1218).	self assert: ((sueldos at: 2) = 2610).	self assert: ((sueldos at: 3) = 1044).! !Object subclass: #Empleado	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Sueldos'!!Empleado commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Empleado methodsFor: 'data-processing' stamp: 'FerminMinetto 5/7/2016 16:07'!calcularSueldoConcreto	^SubclassResponsibility ! !!Empleado methodsFor: 'data-processing' stamp: 'FerminMinetto 5/7/2016 16:26'!sueldo		^ ( self calcularSueldoConcreto - ((13* self calcularSueldoConcreto) / 100 ) ).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Empleado class	instanceVariableNames: ''!!Empleado class methodsFor: 'as yet unclassified' stamp: 'FerminMinetto 5/7/2016 15:47'!new	^super new! !Empleado subclass: #Planta	instanceVariableNames: 'sueldoBasico plusPorHijo cantidadHijos'	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Sueldos'!!Planta commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Planta methodsFor: 'initialization' stamp: 'FerminMinetto 5/7/2016 16:28'!initialize	plusPorHijo := 150.	sueldoBasico := 3000.! !!Planta methodsFor: 'data-processing' stamp: 'FerminMinetto 5/7/2016 16:26'!calcularSueldoConcreto	^( (plusPorHijo * cantidadHijos) + self sueldoBasico)! !!Planta methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 16:04'!plusPorHijo: anObject	plusPorHijo := anObject! !!Planta methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 16:04'!cantidadHijos: anObject	cantidadHijos := anObject! !!Planta methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 16:04'!sueldoBasico	^ sueldoBasico! !!Planta methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 16:04'!sueldoBasico: anObject	sueldoBasico := anObject! !!Planta methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 16:04'!plusPorHijo	^ plusPorHijo! !!Planta methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 16:04'!cantidadHijos	^ cantidadHijos! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Planta class	instanceVariableNames: ''!!Planta class methodsFor: 'as yet unclassified' stamp: 'FerminMinetto 5/7/2016 16:06'!newWithCantidadDeHijos: aNumber	^ ( (super new) cantidadHijos: aNumber )! !Empleado subclass: #Temporario	instanceVariableNames: 'horasTrabajadas bonusFamiliar sueldoBasico costoPorHora'	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Sueldos'!!Temporario commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Temporario methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 15:42'!bonusFamiliar	^ bonusFamiliar! !!Temporario methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 15:42'!bonusFamiliar: anObject	bonusFamiliar := anObject! !!Temporario methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 15:42'!horasTrabajadas	^ horasTrabajadas! !!Temporario methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 15:42'!horasTrabajadas: anObject	horasTrabajadas := anObject! !!Temporario methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 15:42'!sueldoBasico	^ sueldoBasico! !!Temporario methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 15:42'!sueldoBasico: anObject	sueldoBasico := anObject! !!Temporario methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 15:42'!costoPorHora	^ costoPorHora! !!Temporario methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 15:42'!costoPorHora: anObject	costoPorHora := anObject! !!Temporario methodsFor: 'initialization' stamp: 'FerminMinetto 5/7/2016 16:19'!initialize	sueldoBasico := 1000.	costoPorHora := 5.! !!Temporario methodsFor: 'data-processing' stamp: 'FerminMinetto 5/7/2016 16:26'!calcularSueldoConcreto	^ ( (horasTrabajadas * costoPorHora) + self sueldoBasico + ( (bonusFamiliar = True) ifTrue: [ 150 ] ifFalse: [ 0 ] ) ).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Temporario class	instanceVariableNames: ''!!Temporario class methodsFor: 'as yet unclassified' stamp: 'FerminMinetto 5/7/2016 15:48'!newWithBonus: aBoolean horasTrabajadas: horas	^ ((super new) bonusFamiliar: aBoolean; horasTrabajadas: horas)! !Empleado subclass: #Pasante	instanceVariableNames: 'horasTrabajadas costoPorHora'	classVariableNames: ''	poolDictionaries: ''	category: 'ObjetosPractica4Sueldos'!!Pasante commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Pasante methodsFor: 'initialization' stamp: 'FerminMinetto 5/7/2016 15:51'!initialize	costoPorHora := 40.! !!Pasante methodsFor: 'data-processing' stamp: 'FerminMinetto 5/7/2016 16:03'!calcularSueldoConcreto	^ ( costoPorHora * horasTrabajadas )! !!Pasante methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 15:50'!costoPorHora	^ costoPorHora! !!Pasante methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 15:50'!costoPorHora: anObject	costoPorHora := anObject! !!Pasante methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 15:50'!horasTrabajadas	^ horasTrabajadas! !!Pasante methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 15:50'!horasTrabajadas: anObject	horasTrabajadas := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pasante class	instanceVariableNames: ''!!Pasante class methodsFor: 'as yet unclassified' stamp: 'FerminMinetto 5/7/2016 15:51'!newWithHoras: horas	^((super new) horasTrabajadas: horas)! !