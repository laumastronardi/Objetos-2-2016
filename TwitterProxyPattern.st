Object subclass: #Twitter	instanceVariableNames: 'usersRetrieved retriever'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-TP05-Util'!!Twitter commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Twitter methodsFor: 'retrieve-methods' stamp: 'FerminMinetto 5/7/2016 22:51'!retrieveUser: anUsername	^ (usersRetrieved add: (self retrieveUserInfo: anUsername ) ).	! !!Twitter methodsFor: 'accesing' stamp: 'FerminMinetto 5/7/2016 19:27'!usersRetrieved	^usersRetrieved! !!Twitter methodsFor: 'initialization' stamp: 'FerminMinetto 5/7/2016 19:38'!initialize	retriever := LineRetriever on: 'C:\Users\Fermin\Downloads\TP05\twitter-users.csv'.	usersRetrieved := OrderedCollection new.! !!Twitter methodsFor: 'test' stamp: 'FerminMinetto 5/7/2016 23:01'!verificarSiExiste: anUserName	^(usersRetrieved anySatisfy: [ :x | x username = anUserName ])! !!Twitter methodsFor: 'private' stamp: 'FerminMinetto 5/7/2016 22:49'!retrieveUserLine: anUserName	^(retriever retrieveLineStartingWith: anUserName)		! !!Twitter methodsFor: 'private' stamp: 'FerminMinetto 5/7/2016 23:10'!retrieveUserInfo: anUserName	| col user userProxy |	col := (self retrieveUserLine: anUserName) findTokens: ','.	user := ConcreteUser new.	user twitter: self.	user username: (col at: 1).	user name: (col at: 2).	col size > 2		ifTrue: [ 			3 to: col size do: [ :i |				(self verificarSiExiste:(col at: i) ) ifFalse: [ userProxy := ProxyUser new.				userProxy username: (col at: i).				(user followers) add: userProxy.				userProxy twitter: self. ]				 ]				].	^user		! !Object subclass: #LineRetriever	instanceVariableNames: 'filename'	classVariableNames: 'instance'	poolDictionaries: ''	category: 'OO2-TP05-Util'!!LineRetriever commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	filename:		<Object>    Implementation Points!!LineRetriever methodsFor: 'as yet unclassified' stamp: 'ArturoZambrano 4/23/2016 15:25'!retrieveLineStartingWith: aString	| stream |	stream := filename asFileReference readStream.	[ stream atEnd ]		whileFalse: [ | header line |			line := stream nextLine.			header := line first: 10.			(header findString: aString) = 1				ifTrue: [ stream close. 					^ line ] ].	stream close.	^ nil! !!LineRetriever methodsFor: 'accessing' stamp: 'ArturoZambrano 4/23/2016 15:14'!filename: anObject	filename := anObject! !!LineRetriever methodsFor: 'accessing' stamp: 'ArturoZambrano 4/23/2016 15:14'!filename	^ filename! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LineRetriever class	instanceVariableNames: ''!!LineRetriever class methodsFor: 'instance creation' stamp: 'ArturoZambrano 4/23/2016 15:59'!instance ^instance! !!LineRetriever class methodsFor: 'instance creation' stamp: 'ArturoZambrano 4/23/2016 15:59'!on: aFilename  instance:= self new. ^instance filename: aFilename; yourself.! !Object subclass: #User	instanceVariableNames: 'twitter username name followers'	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-TP05-Util'!!User commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	followers:		<Object>	name:		<Object>	username:		<Object>    Implementation Points!!User methodsFor: 'initialization' stamp: 'FerminMinetto 5/7/2016 19:20'!initialize	followers := OrderedCollection new.! !!User methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 19:33'!twitter: anObject	twitter := anObject! !!User methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 19:04'!followers	^ followers! !!User methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 19:04'!username	^ username! !!User methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 19:04'!name: anObject	name := anObject! !!User methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 19:04'!name	^ name! !!User methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 19:04'!followers: anObject	followers := anObject! !!User methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 19:04'!username: anObject	username := anObject! !!User methodsFor: 'accessing' stamp: 'FerminMinetto 5/7/2016 19:33'!twitter	^ twitter! !User subclass: #ProxyUser	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-TP05-Util'!!ProxyUser commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!ProxyUser methodsFor: 'as yet unclassified' stamp: 'FerminMinetto 5/7/2016 22:56'!name	| u |	u := twitter retrieveUserInfo: username.	u become: self.	(self twitter usersRetrieved) add: self.	^ (self name).! !User subclass: #ConcreteUser	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OO2-TP05-Util'!!ConcreteUser commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!